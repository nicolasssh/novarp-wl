const { ChannelType, EmbedBuilder, Colors, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const { getGuildConfig } = require('../../utils/configManager');
const logger = require('../../utils/logger');

// G√©rer la validation/refus du formulaire de whitelist
async function handleFormValidation(client, interaction, isValidation) {
  try {
    // R√©cup√©rer l'ID de l'utilisateur concern√©
    const userId = interaction.customId.split('_')[2];
    
    // R√©cup√©rer la configuration du serveur
    const guildConfig = getGuildConfig(interaction.guild.id);
    if (!guildConfig) {
      await interaction.reply({
        content: "‚ùå Erreur: Configuration du serveur manquante. Veuillez contacter un administrateur.",
        ephemeral: true
      });
      return;
    }
    
    if (!guildConfig.staffWlRoleId) {
      await interaction.reply({
        content: "‚ùå La configuration du r√¥le mod√©rateur est manquante sur ce serveur.",
        ephemeral: true
      });
      return;
    }
    
    // V√©rifier si l'utilisateur a le r√¥le requis
    const member = interaction.member;
    if (!member.roles.cache.has(guildConfig.staffWlRoleId)) {
      await interaction.reply({
        content: "‚ùå Vous n'avez pas la permission d'utiliser ce bouton. Seuls les mod√©rateurs peuvent valider ou refuser les demandes.",
        ephemeral: true
      });
      return;
    }
    
    const action = isValidation ? "valid√©e" : "refus√©e";
    const emoji = isValidation ? "‚úÖ" : "‚ùå";
    const color = isValidation ? Colors.Green : Colors.Red;
    
    // Cr√©er l'embed de r√©ponse
    const responseEmbed = new EmbedBuilder()
      .setColor(color)
      .setTitle(`${emoji} Demande ${action}`)
      .setDescription(`La demande de whitelist a √©t√© ${action} par <@${interaction.user.id}>.`)
      .setFooter({ text: `Mod√©rateur: ${interaction.user.tag}` })
      .setTimestamp();
    
    // Mettre √† jour le message avec le nouvel embed et retirer les boutons de validation/refus
    // Si c'est une validation, on va ajouter de nouveaux boutons pour l'entretien
    if (isValidation) {
      // Cr√©er les boutons d'entretien
      const validateInterviewButton = new ButtonBuilder()
        .setCustomId(`validate_interview_${userId}`)
        .setLabel('Valider l\'entretien')
        .setStyle(ButtonStyle.Success)
        .setEmoji('‚úÖ');
        
      const rejectInterviewButton = new ButtonBuilder()
        .setCustomId(`reject_interview_${userId}`)
        .setLabel('Refuser l\'entretien')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('‚ùå');
      
      const interviewButtonsRow = new ActionRowBuilder().addComponents(validateInterviewButton, rejectInterviewButton);
      
      await interaction.update({
        content: `<@${userId}>, votre demande de whitelist a √©t√© approuv√©e! üéâ Un mod√©rateur va maintenant proc√©der √† l'entretien.`,
        components: [interviewButtonsRow],
        embeds: [responseEmbed]
      });
    } else {
      // Si c'est un refus, on retire tous les boutons
      await interaction.update({
        content: `<@${userId}>, votre demande de whitelist a √©t√© refus√©e.`,
        components: [],
        embeds: [responseEmbed]
      });
    }
    
    // Obtenir l'objet canal
    const channel = interaction.channel;
    
    // R√©cup√©rer les noms des cat√©gories depuis la configuration
    const categoryApprovedName = guildConfig.categories?.approved || '‚úÖ WL valid√©e';
    const categoryRejectedName = guildConfig.categories?.rejected || '‚ùå WL refus√©e';
    
    if (isValidation) {
      // Si valid√©, d√©placer vers la cat√©gorie des demandes valid√©es (√† cr√©er si n√©cessaire)
      let validatedCategory = interaction.guild.channels.cache.find(
        c => c.type === ChannelType.GuildCategory && c.name === categoryApprovedName
      );
      
      if (!validatedCategory) {
        validatedCategory = await interaction.guild.channels.create({
          name: categoryApprovedName,
          type: ChannelType.GuildCategory,
          permissionOverwrites: [
            {
              id: interaction.guild.id, // @everyone
              deny: [PermissionsBitField.Flags.ViewChannel]
            },
            {
              id: interaction.guild.members.me.id, // Le bot
              allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]
            }
          ]
        });
      }
      
      await channel.setParent(validatedCategory.id, { lockPermissions: false });
      
      // Envoyer un message de suivi
      await channel.send({
        content: `<@${userId}>, f√©licitations! Votre formulaire de whitelist a √©t√© valid√©. Un mod√©rateur va maintenant proc√©der √† l'entretien.`
      });
      
      // Trouver le membre et lui ajouter le r√¥le
      try {
        const userMember = await interaction.guild.members.fetch(userId);
        
        if (guildConfig.validRequestRoleId) {
          // V√©rifier si le bot a la permission et si le r√¥le est accessible
          const botMember = interaction.guild.members.me;
          const roleToAdd = interaction.guild.roles.cache.get(guildConfig.validRequestRoleId);
          
          // V√©rifier si le r√¥le existe
          if (!roleToAdd) {
            await channel.send({
              content: `‚ö†Ô∏è Erreur: Le r√¥le avec l'ID ${guildConfig.validRequestRoleId} n'existe pas.`
            });
            return;
          }
          
          // V√©rifier la hi√©rarchie des r√¥les
          if (roleToAdd.position >= botMember.roles.highest.position) {
            await channel.send({
              content: `‚ö†Ô∏è Je ne peux pas attribuer le r√¥le ${roleToAdd.name} car il est plac√© plus haut ou au m√™me niveau que mon r√¥le le plus √©lev√© dans la hi√©rarchie du serveur.`
            });
            return;
          }
          
          await userMember.roles.add(guildConfig.validRequestRoleId);
          logger.info(`R√¥le de validation ajout√© √† ${userMember.user.tag}`);
          
          await channel.send({
            content: `Le r√¥le <@&${guildConfig.validRequestRoleId}> a √©t√© attribu√© √† <@${userId}>.`
          });
        } else {
          logger.warning(`Le r√¥le de validation n'est pas configur√© pour le serveur ${interaction.guild.name}`);
          await channel.send({
            content: `‚ö†Ô∏è Attention : Le r√¥le de validation n'est pas configur√© correctement. Veuillez contacter un administrateur.`
          });
        }
      } catch (error) {
        logger.error(`Erreur lors de l'ajout du r√¥le √† l'utilisateur ${userId}`, error);
        await channel.send({
          content: `‚ö†Ô∏è Erreur lors de l'attribution du r√¥le √† <@${userId}>. D√©tails: ${error.message || "Erreur inconnue"}. Veuillez v√©rifier que le r√¥le existe et que le bot a les permissions n√©cessaires.`
        });
      }
    } else {
      // Si refus√©, d√©placer vers une cat√©gorie des demandes refus√©es (√† cr√©er si n√©cessaire)
      let rejectedCategory = interaction.guild.channels.cache.find(
        c => c.type === ChannelType.GuildCategory && c.name === categoryRejectedName
      );
      
      if (!rejectedCategory) {
        rejectedCategory = await interaction.guild.channels.create({
          name: categoryRejectedName,
          type: ChannelType.GuildCategory,
          permissionOverwrites: [
            {
              id: interaction.guild.id, // @everyone
              deny: [PermissionsBitField.Flags.ViewChannel]
            },
            {
              id: interaction.guild.members.me.id, // Le bot
              allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]
            }
          ]
        });
      }
      
      await channel.setParent(rejectedCategory.id, { lockPermissions: false });
      
      // Envoyer un message de suivi
      await channel.send({
        content: `<@${userId}>, d√©sol√©, votre demande de whitelist a √©t√© refus√©e. Vous pouvez contacter un mod√©rateur pour en savoir plus.`
      });
    }
    
    logger.info(`Demande de whitelist ${action} pour l'utilisateur <@${userId}> par ${interaction.user.tag}`);
  } catch (error) {
    logger.error(`Erreur lors du traitement du bouton de validation/refus`, error);
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({
        content: "D√©sol√©, une erreur s'est produite lors du traitement de votre action. Veuillez r√©essayer plus tard.",
        ephemeral: true
      });
    }
  }
}

module.exports = {
  handleFormValidation
};