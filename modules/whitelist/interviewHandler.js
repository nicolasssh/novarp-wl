const { EmbedBuilder, Colors, ButtonBuilder, ButtonStyle, ActionRowBuilder, ChannelType, PermissionsBitField } = require('discord.js');
const { getGuildConfig } = require('../../utils/configManager');
const logger = require('../../utils/logger');

// Valider ou rejeter une demande de whitelist
async function validateWhitelistRequest(client, interaction, userId, isValidation) {
  try {
    // R√©cup√©rer la configuration du serveur
    const guildConfig = getGuildConfig(interaction.guild.id);
    if (!guildConfig) {
      await interaction.reply({
        content: "‚ùå Erreur: Configuration du serveur manquante. Veuillez contacter un administrateur.",
        ephemeral: true
      });
      return;
    }
    
    if (!guildConfig.staffWlRoleId) {
      await interaction.reply({
        content: "‚ùå La configuration du r√¥le mod√©rateur est manquante sur ce serveur.",
        ephemeral: true
      });
      return;
    }
    
    // V√©rifier si l'utilisateur a le r√¥le requis
    const member = interaction.member;
    if (!member.roles.cache.has(guildConfig.staffWlRoleId)) {
      await interaction.reply({
        content: "‚ùå Vous n'avez pas la permission d'utiliser ce bouton. Seuls les mod√©rateurs peuvent valider ou refuser les demandes.",
        ephemeral: true
      });
      return;
    }
    
    const action = isValidation ? "valid√©e" : "refus√©e";
    const emoji = isValidation ? "‚úÖ" : "‚ùå";
    const color = isValidation ? Colors.Green : Colors.Red;
    
    // Cr√©er l'embed de r√©ponse
    const responseEmbed = new EmbedBuilder()
      .setColor(color)
      .setTitle(`${emoji} Demande ${action}`)
      .setDescription(`La demande de whitelist a √©t√© ${action} par <@${interaction.user.id}>.`)
      .setFooter({ text: `Mod√©rateur: ${interaction.user.tag}` })
      .setTimestamp();
    
    // Mettre √† jour le message avec le nouvel embed
    if (isValidation) {
      // Cr√©er les boutons d'entretien
      const validateInterviewButton = new ButtonBuilder()
        .setCustomId(`validate_interview_${userId}`)
        .setLabel('Valider l\'entretien')
        .setStyle(ButtonStyle.Success)
        .setEmoji('‚úÖ');
        
      const rejectInterviewButton = new ButtonBuilder()
        .setCustomId(`reject_interview_${userId}`)
        .setLabel('Refuser l\'entretien')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('‚ùå');
      
      const interviewButtonsRow = new ActionRowBuilder().addComponents(validateInterviewButton, rejectInterviewButton);
      
      await interaction.update({
        content: `<@${userId}>, votre demande de whitelist a √©t√© approuv√©e! üéâ Un mod√©rateur va maintenant proc√©der √† l'entretien.`,
        components: [interviewButtonsRow],
        embeds: [responseEmbed]
      });
    } else {
      // Si c'est un refus, on retire tous les boutons
      await interaction.update({
        content: `<@${userId}>, votre demande de whitelist a √©t√© refus√©e.`,
        components: [],
        embeds: [responseEmbed]
      });
    }
    
    // Obtenir l'objet canal
    const channel = interaction.channel;
    const guild = interaction.guild;
    
    // R√©cup√©rer les noms des cat√©gories depuis la configuration
    const categoryApprovedName = guildConfig.categories?.approved || '‚úÖ WL valid√©e';
    const categoryRejectedName = guildConfig.categories?.rejected || '‚ùå WL refus√©e';
    
    if (isValidation) {
      await processValidation(guild, channel, userId, guildConfig, categoryApprovedName);
    } else {
      await processRejection(guild, channel, userId, categoryRejectedName);
    }
    
    logger.info(`Demande de whitelist ${action} pour l'utilisateur <@${userId}> par ${interaction.user.tag}`);
  } catch (error) {
    logger.error(`Erreur lors du traitement du bouton de validation/refus`, error);
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({
        content: "D√©sol√©, une erreur s'est produite lors du traitement de votre action. Veuillez r√©essayer plus tard.",
        ephemeral: true
      });
    }
  }
}

// Traiter une validation de formulaire
async function processValidation(guild, channel, userId, guildConfig, categoryApprovedName) {
  try {
    // Si valid√©, d√©placer vers la cat√©gorie des demandes valid√©es (√† cr√©er si n√©cessaire)
    let validatedCategory = guild.channels.cache.find(
      c => c.type === ChannelType.GuildCategory && c.name === categoryApprovedName
    );
    
    if (!validatedCategory) {
      validatedCategory = await guild.channels.create({
        name: categoryApprovedName,
        type: ChannelType.GuildCategory,
        permissionOverwrites: [
          {
            id: guild.id, // @everyone
            deny: [PermissionsBitField.Flags.ViewChannel]
          },
          {
            id: guild.members.me.id, // Le bot
            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]
          }
        ]
      });
    }
    
    await channel.setParent(validatedCategory.id, { lockPermissions: false });
    
    // Envoyer un message de suivi
    await channel.send({
      content: `<@${userId}>, f√©licitations! Votre formulaire de whitelist a √©t√© valid√©. Un mod√©rateur va maintenant proc√©der √† l'entretien.`
    });
    
    // Trouver le membre et lui ajouter le r√¥le
    try {
      const userMember = await guild.members.fetch(userId);
      
      if (guildConfig.validRequestRoleId) {
        // V√©rifier si le bot a la permission et si le r√¥le est accessible
        const botMember = guild.members.me;
        const roleToAdd = guild.roles.cache.get(guildConfig.validRequestRoleId);
        
        // V√©rifier si le r√¥le existe
        if (!roleToAdd) {
          await channel.send({
            content: `‚ö†Ô∏è Erreur: Le r√¥le avec l'ID ${guildConfig.validRequestRoleId} n'existe pas.`
          });
          return;
        }
        
        // V√©rifier la hi√©rarchie des r√¥les
        if (roleToAdd.position >= botMember.roles.highest.position) {
          await channel.send({
            content: `‚ö†Ô∏è Je ne peux pas attribuer le r√¥le ${roleToAdd.name} car il est plac√© plus haut ou au m√™me niveau que mon r√¥le le plus √©lev√© dans la hi√©rarchie du serveur.`
          });
          logger.warning(`Probl√®me de hi√©rarchie des r√¥les: Bot (${botMember.roles.highest.position}) vs R√¥le (${roleToAdd.position})`);
          return;
        }
        
        // V√©rifier la permission de g√©rer les r√¥les
        if (!botMember.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
          await channel.send({
            content: `‚ö†Ô∏è Je n'ai pas la permission de g√©rer les r√¥les. Veuillez donner la permission "G√©rer les r√¥les" √† mon r√¥le.`
          });
          return;
        }
        
        // Ajouter le r√¥le
        await userMember.roles.add(roleToAdd);
        logger.info(`R√¥le de validation ajout√© √† ${userMember.user.tag}`);
        
        await channel.send({
          content: `Le r√¥le <@&${guildConfig.validRequestRoleId}> a √©t√© attribu√© √† <@${userId}>.`
        });
      } else {
        logger.warning(`Le r√¥le de validation n'est pas configur√© pour le serveur ${guild.name}`);
        await channel.send({
          content: `‚ö†Ô∏è Attention : Le r√¥le de validation n'est pas configur√© correctement. Veuillez contacter un administrateur.`
        });
      }
    } catch (error) {
      logger.error(`Erreur lors de l'ajout du r√¥le √† l'utilisateur ${userId}`, error);
      await channel.send({
        content: `‚ö†Ô∏è Erreur lors de l'attribution du r√¥le √† <@${userId}>. D√©tails: ${error.message || "Erreur inconnue"} (Code: ${error.code || "aucun code"}). Veuillez v√©rifier que le r√¥le existe et que le bot a les permissions n√©cessaires.`
      });
    }
  } catch (error) {
    logger.error(`Erreur lors du traitement de la validation`, error);
    throw error;
  }
}

// Traiter un refus de formulaire
async function processRejection(guild, channel, userId, categoryRejectedName) {
  try {
    // Si refus√©, d√©placer vers une cat√©gorie des demandes refus√©es (√† cr√©er si n√©cessaire)
    let rejectedCategory = guild.channels.cache.find(
      c => c.type === ChannelType.GuildCategory && c.name === categoryRejectedName
    );
    
    if (!rejectedCategory) {
      rejectedCategory = await guild.channels.create({
        name: categoryRejectedName,
        type: ChannelType.GuildCategory,
        permissionOverwrites: [
          {
            id: guild.id, // @everyone
            deny: [PermissionsBitField.Flags.ViewChannel]
          },
          {
            id: guild.members.me.id, // Le bot
            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]
          }
        ]
      });
    }
    
    await channel.setParent(rejectedCategory.id, { lockPermissions: false });
    
    // Envoyer un message de suivi
    await channel.send({
      content: `<@${userId}>, d√©sol√©, votre demande de whitelist a √©t√© refus√©e. Vous pouvez contacter un mod√©rateur pour en savoir plus.`
    });
  } catch (error) {
    logger.error(`Erreur lors du traitement du refus`, error);
    throw error;
  }
}

// Valider ou rejeter un entretien
async function validateInterview(client, interaction, userId, isValidation) {
  try {
    // R√©cup√©rer la configuration du serveur
    const guildConfig = getGuildConfig(interaction.guild.id);
    if (!guildConfig) {
      await interaction.reply({
        content: "‚ùå Erreur: Configuration du serveur manquante. Veuillez contacter un administrateur.",
        ephemeral: true
      });
      return;
    }
    
    if (!guildConfig.staffWlRoleId) {
      await interaction.reply({
        content: "‚ùå La configuration du r√¥le mod√©rateur est manquante sur ce serveur.",
        ephemeral: true
      });
      return;
    }
    
    // V√©rifier si l'utilisateur a le r√¥le requis
    const member = interaction.member;
    if (!member.roles.cache.has(guildConfig.staffWlRoleId)) {
      await interaction.reply({
        content: "‚ùå Vous n'avez pas la permission d'utiliser ce bouton. Seuls les mod√©rateurs peuvent valider ou refuser les entretiens.",
        ephemeral: true
      });
      return;
    }
    
    const action = isValidation ? "valid√©" : "refus√©";
    const emoji = isValidation ? "‚úÖ" : "‚ùå";
    const color = isValidation ? Colors.Green : Colors.Red;
    
    // Cr√©er l'embed de r√©ponse
    const responseEmbed = new EmbedBuilder()
      .setColor(color)
      .setTitle(`${emoji} Entretien ${action}`)
      .setDescription(`L'entretien de whitelist a √©t√© ${action} par <@${interaction.user.id}>.`)
      .setFooter({ text: `Mod√©rateur: ${interaction.user.tag}` })
      .setTimestamp();
    
    // Mettre √† jour le message avec le nouvel embed et retirer les boutons
    await interaction.update({
      content: isValidation 
        ? `<@${userId}>, votre entretien de whitelist a √©t√© approuv√©! üéâ Bienvenue sur le serveur!`
        : `<@${userId}>, votre entretien de whitelist a √©t√© refus√©.`,
      components: [],
      embeds: [responseEmbed]
    });
    
    // Obtenir l'objet canal
    const channel = interaction.channel;
    const guild = interaction.guild;
    
    if (isValidation) {
      await processInterviewApproval(guild, channel, userId, guildConfig);
    } else {
      await processInterviewRejection(guild, channel, userId, guildConfig);
    }
    
    logger.info(`Entretien de whitelist ${action} pour l'utilisateur <@${userId}> par ${interaction.user.tag}`);
  } catch (error) {
    logger.error(`Erreur lors du traitement du bouton d'entretien`, error);
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({
        content: "D√©sol√©, une erreur s'est produite lors du traitement de votre action. Veuillez r√©essayer plus tard.",
        ephemeral: true
      });
    }
  }
}

// Traiter l'approbation d'un entretien
async function processInterviewApproval(guild, channel, userId, guildConfig) {
  try {
    // Si l'entretien est valid√©, ajouter le r√¥le final de WL
    const userMember = await guild.members.fetch(userId);
    
    if (guildConfig.validWlRoleId) {
      // R√©cup√©rer le r√¥le √† ajouter
      const roleToAdd = guild.roles.cache.get(guildConfig.validWlRoleId);
      
      // V√©rifier si le r√¥le existe
      if (!roleToAdd) {
        await channel.send({
          content: `‚ö†Ô∏è Erreur: Le r√¥le avec l'ID ${guildConfig.validWlRoleId} n'existe pas.`
        });
        return;
      }
      
      // V√©rifier la hi√©rarchie des r√¥les
      if (guild.members.me.roles.highest.position <= roleToAdd.position) {
        await channel.send({
          content: `‚ö†Ô∏è Erreur: Je ne peux pas attribuer ce r√¥le car il est positionn√© plus haut que mon r√¥le le plus √©lev√© dans la hi√©rarchie.`
        });
        logger.warning(`Probl√®me de hi√©rarchie de r√¥les: Bot (${guild.members.me.roles.highest.position}) vs R√¥le (${roleToAdd.position})`);
        return;
      }
      
      // V√©rifier la permission de g√©rer les r√¥les
      if (!guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
        await channel.send({
          content: `‚ö†Ô∏è Je n'ai pas la permission de g√©rer les r√¥les. Veuillez donner la permission "G√©rer les r√¥les" √† mon r√¥le.`
        });
        return;
      }
      
      // Tenter d'ajouter le r√¥le
      try {
        await userMember.roles.add(roleToAdd);
        logger.info(`R√¥le de WL valid√©e ajout√© √† ${userMember.user.tag}`);
        
        await channel.send({
          content: `üéâ F√©licitations <@${userId}>! Le r√¥le <@&${guildConfig.validWlRoleId}> vous a √©t√© attribu√©, vous √™tes maintenant whitelist√© sur le serveur.`
        });
      } catch (roleError) {
        // Gestion d√©taill√©e de l'erreur d'ajout de r√¥le
        const errorDetails = `Code: ${roleError.code}, Message: ${roleError.message}`;
        logger.error(`Erreur pr√©cise lors de l'ajout du r√¥le: ${errorDetails}`);
        
        await channel.send({
          content: `‚ö†Ô∏è Je n'ai pas pu attribuer le r√¥le pour la raison suivante: ${errorDetails}`
        });
      }
    } else {
      logger.warning(`Le r√¥le de WL finale n'est pas configur√© pour le serveur ${guild.name}`);
      await channel.send({
        content: `‚ö†Ô∏è Attention : Le r√¥le de WL finale n'est pas configur√© correctement. Veuillez contacter un administrateur.`
      });
    }
    
    // Cr√©er une nouvelle cat√©gorie pour les WL compl√®tes si elle n'existe pas
    let completedCategory = guild.channels.cache.find(
      c => c.type === ChannelType.GuildCategory && c.name === 'üåü WL Compl√®te'
    );
    
    if (!completedCategory) {
      completedCategory = await guild.channels.create({
        name: 'üåü WL Compl√®te',
        type: ChannelType.GuildCategory,
        permissionOverwrites: [
          {
            id: guild.id, // @everyone
            deny: [PermissionsBitField.Flags.ViewChannel]
          },
          {
            id: guild.members.me.id, // Le bot
            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]
          }
        ]
      });
    }
    
    // D√©placer le canal dans la cat√©gorie
    await channel.setParent(completedCategory.id, { lockPermissions: false });
  } catch (error) {
    logger.error(`Erreur lors du traitement de l'approbation d'entretien`, error);
    throw error;
  }
}

// Traiter le refus d'un entretien
async function processInterviewRejection(guild, channel, userId, guildConfig) {
  try {
    // Si l'entretien est refus√©
    await channel.send({
      content: `<@${userId}>, d√©sol√©, votre entretien de whitelist a √©t√© refus√©. Vous pouvez contacter un mod√©rateur pour en savoir plus.`
    });
    
    // Utiliser la m√™me cat√©gorie que les refus de formulaire
    const categoryRejectedName = guildConfig.categories?.rejected || '‚ùå WL refus√©e';
    
    let rejectedCategory = guild.channels.cache.find(
      c => c.type === ChannelType.GuildCategory && c.name === categoryRejectedName
    );
    
    if (!rejectedCategory) {
      rejectedCategory = await guild.channels.create({
        name: categoryRejectedName,
        type: ChannelType.GuildCategory,
        permissionOverwrites: [
          {
            id: guild.id, // @everyone
            deny: [PermissionsBitField.Flags.ViewChannel]
          },
          {
            id: guild.members.me.id, // Le bot
            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]
          }
        ]
      });
    }
    
    // D√©placer le canal dans la cat√©gorie
    await channel.setParent(rejectedCategory.id, { lockPermissions: false });
  } catch (error) {
    logger.error(`Erreur lors du traitement du refus d'entretien`, error);
    throw error;
  }
}

module.exports = {
  validateWhitelistRequest,
  validateInterview
};